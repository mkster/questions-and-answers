{"version":3,"sources":["APIHelper.js","Components/QuestionAsker.jsx","Components/QuestionAnswerer.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","require","default","backend","questionText","a","answerData","question","authorID","post","questionID","answerText","answer","useGet","url","useState","response","setResponse","updateGet","get","then","result","data","failReason","useEffect","QuestionAsker","props","inputStr","setInputStr","onButtonPressed","team","postQuestion","onQuestionAsked","type","value","onChange","event","str","target","onClick","QuestionAnswerer","postAnswer","onQuestionAnswered","Typography","Title","Paragraph","Text","App","questions","updateQuestions","map","q","Question","key","_id","answers","updateAnswers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4657da13.chunk.js","sourcesContent":["\r\nimport React, { Component, useState, useEffect } from 'react'\r\nconst axios = require('axios').default;\r\nconst backend = 'http://localhost:3001/'\r\n\r\nconst currentUserID = 1; //TODO I guess normally the backedn should know current user instead of passing it here\r\n\r\nexport function useAllQuestions() {\r\n    const url = backend + \"questions\"\r\n    return useGet(url)\r\n}\r\n\r\n\r\nexport function useAnswers(questionID) {\r\n    const url = backend + `question/${questionID}/answers`\r\n    return useGet(url)\r\n}\r\n\r\nexport function useAnswerBy(questionID, authorID) {\r\n    const url = backend + `question/${questionID}/answers/${authorID}`\r\n    return useGet(url)\r\n}\r\n\r\nexport async function postQuestion(questionText) {\r\n    const authorID = currentUserID;\r\n    const answerData = { question: questionText, authorID: authorID }\r\n    const url = backend + `question`\r\n    return await post(url, answerData)\r\n}\r\n\r\nexport async function postAnswer(questionID, answerText) {\r\n    const authorID = currentUserID;\r\n    const answerData = { answer: answerText, questionID: questionID, authorID : authorID}\r\n    const url = backend + `answer`\r\n    return await post(url, answerData)\r\n}\r\n\r\n//returns [] or result and function to refresh result\r\nfunction useGet(url){\r\n    const [response, setResponse] = useState([]);\r\n    useEffect(updateGet, [url])\r\n\r\n    function updateGet(){\r\n        axios.get(url).then(result => {\r\n            setResponse(result.data)\r\n        }, failReason => {\r\n            //failed\r\n            setResponse([])\r\n        })\r\n    }\r\n\r\n    return [response, updateGet]\r\n}\r\n\r\n\r\n//returns [] or result\r\nasync function post(url, data) {\r\n    axios.post(url, data).then(result => {\r\n        return result.data\r\n    }, failReason => {\r\n        //failed\r\n        return []\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default {};\r\n","import React, { Component, useState } from 'react'\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { postQuestion } from '../APIHelper';\r\n\r\n\r\n//make component Input and combine with button here\r\nexport default function QuestionAsker (props) {\r\n    const [inputStr, setInputStr] = useState(\"\")\r\n\r\n    function handleChange(event) {\r\n        const str = event.target.value;\r\n        setInputStr(str);\r\n    }\r\n\r\n    function onButtonPressed(team){\r\n        postQuestion(inputStr)\r\n        setInputStr(\"\");\r\n        props.onQuestionAsked(); \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={inputStr} onChange={handleChange}/>\r\n            <button onClick={()=>onButtonPressed(inputStr)}>Ask</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { Component, useState } from 'react'\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { postAnswer } from '../APIHelper';\r\n\r\n\r\n//make component Input and combine with button here\r\nexport default function QuestionAnswerer (props) {\r\n    const [inputStr, setInputStr] = useState(\"\")\r\n\r\n    function handleChange(event) {\r\n        const str = event.target.value;\r\n        setInputStr(str);\r\n    }\r\n\r\n    function onButtonPressed(team){\r\n        postAnswer(props.questionID, inputStr)\r\n        setInputStr(\"\");\r\n        props.onQuestionAnswered();\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={inputStr} onChange={handleChange}/>\r\n            <button onClick={()=>onButtonPressed(inputStr)}>Answer</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { Component, useState, useEffect } from 'react'\nimport './App.css';\nimport APIHelper, {useAllQuestions, useAnswers} from \"./APIHelper.js\"\n\n\nimport { Card, Button, Row, Col } from 'antd';\nimport { red, volcano, gold, yellow, lime, green, cyan, blue, geekblue, purple, magenta, grey } from '@ant-design/colors';\nimport { Typography, Divider } from 'antd';\nimport { connect } from 'react-redux';\nimport QuestionAsker from './Components/QuestionAsker';\nimport QuestionAnswerer from './Components/QuestionAnswerer';\nconst { Title, Paragraph, Text  } = Typography;\n\n\nexport default function App() {\n  const [questions, updateQuestions] = useAllQuestions();\n  //onQuestionAsked is a bad way since it may not be ready should instead put all Qs into redux and update store when quesion asked?\n  return (\n    <div >\n      {questions.map(q=>\n        <Question key={q._id} question={q}/>\n      )}\n      <p />\n      <p />\n      <p />\n      <QuestionAsker onQuestionAsked={updateQuestions}/>\n    </div>\n  );\n}\n\nfunction Question(props){\n  const question = props.question;\n  const [answers, updateAnswers] = useAnswers(question._id);\n  return (\n    <div >\n      <h3>{question.question}</h3>\n      <QuestionAnswerer questionID = {question._id} onQuestionAnswered={updateAnswers}/>\n      {answers.map(a =>\n        <p key={a._id}>{a.answer}</p>\n      )}\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}